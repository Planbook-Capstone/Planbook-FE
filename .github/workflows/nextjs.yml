name: üöÄ Deploy PlanBook to VPS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: "18"
  VPS_APP_DIR: "/opt/planbook"

jobs:
  # Deploy to VPS (ch·ªâ ch·∫°y khi push v√†o main/master)
  deploy:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì§ Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            echo "üöÄ Starting deployment..."

            # T·∫°o th∆∞ m·ª•c backup
            mkdir -p ${{ env.VPS_APP_DIR }}/backups

            # Backup version hi·ªán t·∫°i (n·∫øu c√≥)
            if [ -d "${{ env.VPS_APP_DIR }}/current" ]; then
              echo "üì¶ Creating backup..."
              cp -r ${{ env.VPS_APP_DIR }}/current ${{ env.VPS_APP_DIR }}/backups/backup-$(date +%Y%m%d-%H%M%S)
              
              # Gi·ªØ l·∫°i 5 backup g·∫ßn nh·∫•t
              cd ${{ env.VPS_APP_DIR }}/backups
              ls -t | tail -n +6 | xargs -r rm -rf
            fi

            # T·∫°o th∆∞ m·ª•c m·ªõi cho deployment
            mkdir -p ${{ env.VPS_APP_DIR }}/new-release
            cd ${{ env.VPS_APP_DIR }}/new-release

            # Clone source code m·ªõi nh·∫•t
            echo "üì• Downloading latest code..."
            git clone https://github.com/${{ github.repository }}.git .

            # Copy environment file
            cp ${{ env.VPS_APP_DIR }}/.env.production .env.production || echo "‚ö†Ô∏è .env.production not found, using default"

            # Stop containers hi·ªán t·∫°i
            echo "üõë Stopping current containers..."
            cd ${{ env.VPS_APP_DIR }}/current 2>/dev/null && docker-compose -f docker-compose.prod.yml down || echo "No containers to stop"

            # Chuy·ªÉn sang version m·ªõi
            cd ${{ env.VPS_APP_DIR }}
            rm -rf current
            mv new-release current
            cd current

            # Build v√† start containers m·ªõi
            echo "üèóÔ∏è Building and starting new containers..."
            docker-compose -f docker-compose.prod.yml up --build -d

            # ƒê·ª£i containers kh·ªüi ƒë·ªông
            echo "‚è≥ Waiting for containers to start..."
            sleep 30

            # Health check
            echo "üîç Performing health check..."
            if curl -f http://localhost:3000/health || curl -f http://localhost:3000; then
              echo "‚úÖ Deployment successful!"
              
              # Cleanup old Docker images
              docker image prune -f
            else
              echo "‚ùå Health check failed! Rolling back..."
              
              # Rollback
              docker-compose -f docker-compose.prod.yml down
              
              # Restore backup
              if [ -d "${{ env.VPS_APP_DIR }}/backups" ]; then
                LATEST_BACKUP=$(ls -t ${{ env.VPS_APP_DIR }}/backups | head -n1)
                if [ ! -z "$LATEST_BACKUP" ]; then
                  echo "üîÑ Restoring from backup: $LATEST_BACKUP"
                  cd ${{ env.VPS_APP_DIR }}
                  rm -rf current
                  cp -r backups/$LATEST_BACKUP current
                  cd current
                  docker-compose -f docker-compose.prod.yml up -d
                fi
              fi
              
              exit 1
            fi

      - name: üîî Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment to VPS completed successfully!"
            echo "üåê App URL: http://${{ secrets.VPS_HOST }}"
          else
            echo "‚ùå Deployment failed!"
          fi
